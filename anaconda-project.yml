name: mlflow-tracking-server
description: MLFlow Tracking Server

variables:
  #
  # All defined values here can be over-written from AE5 secrets of the same name.
  #

  # Server configuration information can be found here:
  # https://www.mlflow.org/docs/latest/cli.html#mlflow-server

  # These values can contain sensitive information should be defined as AE5 secrets when running as a hosted deployment.
  MLFLOW_BACKEND_STORE_URI: sqlite:///data/mlflow/standalone/store/mydb.sqlite
  MLFLOW_ARTIFACTS_DESTINATION: data/mlflow/standalone/artifacts

  # Since the tracking server will also be a proxy artifact server, this configuration
  # is required as it's used by some clients.  Unless proxied artifact access is getting
  # disabled, this should not be changed.
  MLFLOW_DEFAULT_ARTIFACT_ROOT: mlflow-artifacts:/

  # Default age of deleted items to permanently remove during garbage collection.
  MLFLOW_TRACKING_GC_TTL: 30d0h0m0s

commands:
  #
  # Run Time Commands
  #

  # Command launches the MLFlow Tracking Server
  TrackingServer:
    env_spec: default
    unix: python -m src.mlflow.tracking.server.handler --activity server
    supports_http_options: true

  # Command launches the MLFlow Garbage Collector
  GarbageCollection:
    env_spec: default
    unix: python -m src.mlflow.tracking.server.handler --activity gc

  # Command launches the database upgrade
  DatabaseUpgrade:
    env_spec: default
    unix: python -m src.mlflow.tracking.server.handler --activity db_upgrade

  #
  # Minimum Run Time Commands
  #
  # A `minimum` environment has been defined which contains no external drivers.
  # This can be used to run a stand-alone sqllite instance, or as a base for adding
  # environment specific drivers.
  #

  # Command launches the MLFlow Tracking Server
  MinimumTrackingServer:
    env_spec: minimum
    unix: python -m src.mlflow.tracking.server.handler --activity server
    supports_http_options: true

  # Command launches the MLFlow Garbage Collector
  MinimumGarbageCollection:
    env_spec: minimum
    unix: python -m src.mlflow.tracking.server.handler --activity gc

  # Command launches the database upgrade
  MinimumDatabaseUpgrade:
    env_spec: minimum
    unix: python -m src.mlflow.tracking.server.handler --activity db_upgrade

  #
  # Development Time Commands
  #

  bash:
    env_spec: development
    unix: bash

  test:unit:
    env_spec: development
    unix: coverage run --append --rcfile=.coveragerc -m unittest discover test/unit

  coverage:
    env_spec: development
    unix: |
      coverage report
      coverage html
      coverage xml

  test:integration:
    env_spec: development
    unix: python -m unittest discover test/integration

  clean:
    env_spec: development
    unix: |
      rm -rf .coverage htmlcov docs/build

  lint:
    env_spec: development
    unix: |
      pylint src
      isort --check --diff .
      black --line-length=120 --target-version=py310 --check --diff .

  lint:fix:
    env_spec: development
    unix: |
      isort .
      black --line-length=120 --target-version=py310 .

  build:docs:
    env_spec: development
    unix: |
      sphinx-build -b html docs/source docs/build

channels:
    - defaults
    - https://conda.anaconda.org/conda-forge/

platforms:
  - linux-64
  - osx-64
  - osx-arm64
  - win-64

env_specs:
  # The `minimum` environment contains no external drivers.
  # This can be used to run a stand-alone sqllite instance, or as a base for adding
  # environment specific drivers.
  minimum:
    description: Minimum Runtime Environment
    packages:
      - defaults:python=3.11
      - defaults:mlflow=2.6.0
      - defaults:ipykernel

  # The `default` environment contains all external drivers.
  default:
    description: Runtime Environment
    packages:
      - defaults:python=3.11
      - defaults:mlflow=2.6.0
      - defaults:ipykernel

###### Backend SQL Drivers ######

      # PostgreSQL | https://docs.sqlalchemy.org/en/20/core/engines.html#postgresql
      - defaults:psycopg2
      - conda-forge:pg8000
      - defaults::asyncpg

      # MySQL | https://docs.sqlalchemy.org/en/20/core/engines.html#mysql
      - defaults::mysqlclient
      - defaults::PyMySQL

      # Oracle Drivers | https://docs.sqlalchemy.org/en/20/core/engines.html#oracle
      - defaults::cx_oracle

      # Microsoft SQL Server Drivers | https://docs.sqlalchemy.org/en/20/core/engines.html#microsoft-sql-server
      - conda-forge:pyodbc

###### Backend File System Drivers ######
      - conda-forge:azure-storage-blob
      - conda-forge:google-cloud-storage

 # The `development` environment is used for development and maintenance of this solution.
  development:
    description: Development Environment
    packages:
      - defaults::python=3.11
      - defaults::mlflow=2.6.0
      - defaults::ipykernel
      - defaults::isort
      - defaults::black
      - defaults::pylint
      - defaults::coverage
      - defaults::pyyaml

      # Documentation
      - defaults:sphinx
      - defaults:sphinx-rtd-theme
      - defaults:myst-parser

###### Backend SQL Drivers ######

      # PostgreSQL | https://docs.sqlalchemy.org/en/20/core/engines.html#postgresql
      - defaults::psycopg2
      - conda-forge:pg8000
      - defaults:asyncpg

      # MySQL | https://docs.sqlalchemy.org/en/20/core/engines.html#mysql
      - defaults:mysqlclient
      - defaults:PyMySQL

      # Oracle Drivers | https://docs.sqlalchemy.org/en/20/core/engines.html#oracle
      - defaults:cx_oracle

      # Microsoft SQL Server Drivers | https://docs.sqlalchemy.org/en/20/core/engines.html#microsoft-sql-server
      - conda-forge:pyodbc

####### Backend File System Drivers ######
      - conda-forge:azure-storage-blob
      - conda-forge:google-cloud-storage
